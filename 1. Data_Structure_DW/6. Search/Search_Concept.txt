중요!! 어떤 목적과 용도를 이루기 위해 자료구조와 알고리즘을 선택한다.
예를 들어, 목적이 탐색만인 경우 배열을 선택하여 순차탐색/이진탐색/해쉬탐색 등의 탐색 알고리즘을 선택한다.
그러나, 목적이 검색이지만 중간에 데이터의 추가/삭제가 빈번한 경우 -> 위의 방법은 추가/삭제에 대한 비용이 많이 든다.

[탐색(Search)] : 여러 데이터 중에서 원하는 데이터를 찾아내는 것을 의미

1. 선형탐색 : 무작위로 늘어놓은 데이터 모임에서 탐색을 수행한다.
1) 순차 탐색(Sequential Search)
    * 데이터가 담겨있는 배열을 앞에서부터 하나씩 비교해서 원하는 데이터를 찾는 방법
    * 최악의 경우 리스트 길이가 n일 때, n번 비교해야 함 -> O(n)
    * 보초법
2) 문자열 탐색 : 브루트-포스법, KMP법, Boyer-Moore법 -> PatternSearch_Concept.java 참고

2. 비선형탐색
1) 이진탐색 -> BinarySearch_Concept.java
2) Graph : 
    * 그래프는 실제 세계의 현상이나 사물을 정점(Vertex) 또는 노드(Node) 와 간선(Edge)로 표현하기 위해 사용
    * 노드 (Node): 위치를 말함, 정점(Vertex)라고도 함
    * 간선 (Edge): 위치 간의 관계를 표시한 선으로 노드를 연결한 선이라고 보면 됨 (link 또는 branch 라고도 함)
    * 인접 정점 (Adjacent Vertex) : 간선으로 직접 연결된 정점(또는 노드)
    * 정점의 차수 (Degree): 무방향 그래프에서 하나의 정점에 인접한 정점의 수
    * 진입 차수 (In-Degree): 방향 그래프에서 외부에서 오는 간선의 수
    * 진출 차수 (Out-Degree): 방향 그래프에서 외부로 향하는 간선의 수
    * 경로 길이 (Path Length): 경로를 구성하기 위해 사용된 간선의 수
    * 단순 경로 (Simple Path): 처음 정점과 끝 정점을 제외하고 중복된 정점이 없는 경로
    * 사이클 (Cycle): 단순 경로의 시작 정점과 종료 정점이 동일한 경우 
    * 종류 :
        무방향 그래프 : (A,B), 방향이 없는 그래프, 간선을 통해, 노드는 양방향으로 갈 수 있음
        방향 그래프 : <A,B>, 간선에 방향이 있는 그래프
        가중치 그래프 또는 네트워크 : 간선에 비용 또는 가중치가 할당된 그래프
        연결 그래프 (Connected Graph) : 무방향 그래프에 있는 모든 노드에 대해 항상 경로가 존재하는 경우
        비연결 그래프 (Disconnected Graph) : 무방향 그래프에서 특정 노드에 대해 경로가 존재하지 않는 경우
        사이클 (Cycle) : 단순 경로의 시작 노드와 종료 노드가 동일한 경우
        비순환 그래프 (Acyclic Graph) : 사이클이 없는 그래프
        완전 그래프 (Complete Graph) : 그래프의 모든 노드가 서로 연결되어 있는 그래프
    * 그래프 vs 트리 -> 트리는 그래프 중에 속한 특별한 종류라고 볼 수 있음
        노드와 노드를 연결하는 간선으로 표현되는 자료 구조	vs 그래프의 한 종류, 방향성이 있는 비순환 그래프
        방향 그래프, 무방향 그래프 둘다 존재함	           vs 방향 그래프만 존재함
        사이클 가능함, 순환 및 비순환 그래프 모두 존재함    vs 비순환 그래프로 사이클이 존재하지 않음
	    루트 노드 존재하지 않음                           vs 루트 노드 존재함
	    부모 자식 개념이 존재하지 않음	                   vs 부모 자식 관계가 존재함

    * DFS : 깊이 우선 탐색 (Depth First Search): 정점의 자식들을 먼저 탐색하는 방식, 시간복잡도 O(노드수 +간선수)
    * BFS : 너비 우선 탐색 (Breadth First Search): 정점들과 같은 레벨에 있는 노드들 (형제 노드들)을 먼저 탐색하는 방식, 시간복잡도 O(노드수 +간선수)
3) Hash


